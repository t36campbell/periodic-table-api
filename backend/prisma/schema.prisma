generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int      @default(autoincrement()) @id
  email String   @unique
  name  String
  role  Role     @default(USER)
}

model Element {
  id            Int      @default(autoincrement()) @id
  name          String   @unique
  symbol        String   @unique
  svgPath       String   @unique
  group         ElementGroup @relation(fields: [groupId], references: [id])
  groupId       Int
  periodId      ElementPeriod @relation(fields: [periodId], references: [id])
  periodId      Int
  series        ElementSeries @relation(fields: [seriesId], references: [id])
  seriesId      Int
  particles     AtomicParticles @relation(fields: [particlesId], references: [id])
  particlesId   Int
  shell         ElectronShell @relation(fields: [shellId], references: [id])
  shellId       Int
  properties    ElementProperties @relation(fields: [propertiesId], references: [id])
  propertiesId  Int
  details       ElementDetails @relation(fields: [detailsId], references: [id])
  detailsId     Int
}

model AtomicParticles {
  id            Int      @default(autoincrement()) @id
  neutrons      Int
  protons       Int
  electrons     Int
}

model ElectronShell {
  id            Int      @default(autoincrement()) @id
  shells        Int
  valence       Int
  electrons     Int
}

model ElementProperties {
  id                  Int      @default(autoincrement()) @id
  atomicMass          Float
  atomicRadius        Float
  electronegativity   Float
  firstIonization     Float
  meltingPoint        Float
  boilingPoint        Float
  isotopes            Float
  specificHeat        Float
  density             String   // expressed in scientific notation
}

model ElementDetails {
  id              Int      @default(autoincrement()) @id
  radioactive     Boolean
  natural         Boolean
  metal           Boolean
  nonmetal        Boolean
  metalloid       Boolean
  discovered      DateTime? @db.Date
  discoverer      ElementDiscoverer? @relation(fields: [discovererId], references: [id])
  discovererId    Int?
}

model ElementDiscoverer {
  id            Int      @default(autoincrement()) @id
  firstName     String
  lastName      String
}

model ElementGroup {
  id      Int      @default(autoincrement()) @id
  name    String   @unique
}

model ElementPeriod {
  id      Int      @default(autoincrement()) @id
  name    String   @unique
}

model ElementSeries {
  id      Int      @default(autoincrement()) @id
  name    String   @unique
}

model ElementPhase {    
  id                  Int      @default(autoincrement()) @id
  type                ElementPhaseType @relation(fields: [typeId], references: [id])
  typeId              Int   
  temperatureRange    Int[]
}

model ElementPhaseType {    
  id      Int      @default(autoincrement()) @id
  name    String   @unique
}


enum Role {
  ADMIN
  USER
}